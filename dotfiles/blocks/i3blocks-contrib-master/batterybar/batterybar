#!/usr/bin/env bash
#  batterybar; displays battery percentage as a bar on i3blocks
#  
#  Copyright 2015 Keftaa <adnan.37h@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
readarray -t output <<< $(acpi battery)
battery_count=${#output[@]}

for line in "${output[@]}";
do
    percentages+=($(echo "$line" | grep -o -m1 '[0-9]\{1,3\}%' | tr -d '%'))
    statuses+=($(echo "$line" | egrep -o -m1 'Discharging|Charging|AC|Full|Unknown'))
    remaining=$(echo "$line" | egrep -o -m1 '[0-9][0-9]:[0-9][0-9]')
    if [[ -n $remaining ]]; then
        remainings+=(" ($remaining)")
    else 
        remainings+=("")
    fi
done

squares="■"

#There are 8 colors that reflect the current battery percentage when 
#discharging
discharging_color="#000000"
charging_color="#008000"
full_color="#008000"
ac_color="#00800"
low_color="#FF0000"

while getopts 1:2:c:f:a:h opt; do
    case "$opt" in
        1) discharging_color="$OPTARG";;
        2) low_color="$OPTARG";;
        c) charging_color="$OPTARG";;
        f) full_color="$OPTARG";;
        a) ac_color="$OPTARG";;
        h) printf "Usage: batterybar [OPTION] color
        When discharging, there are 8 [1-8] levels colors.
        You can specify custom colors, for example:
        
        batterybar -1 red -2 \"#F6F6F6\" -8 green
        
        You can also specify the colors for the charging, AC and
        charged states:
        
        batterybar -c green -f white -a \"#EEEEEE\"\n";
        exit 0;
    esac
done

end=$(($battery_count - 1))
for i in $(seq 0 $end);
do
    if (( percentages[$i] > 0 && percentages[$i] < 15  )); then
        squares=""
    elif (( percentages[$i] >= 15 && percentages[$i] < 40 )); then
        squares=""
    elif (( percentages[$i] >= 40 && percentages[$i] < 65 )); then
        squares=""
    elif (( percentages[$i] >= 65 && percentages[$i] < 90 )); then
        squares=""
    elif (( percentages[$i] >=90 )); then
        squares=""
    fi

    if [[ "${statuses[$i]}" = "Unknown" ]]; then
        squares="<sup>?</sup>$squares"
    fi

    if (( percentages[$i] > 0 && percentages[$i] < 15 && "$statuses[$i]"!="Charging"  )); then
        color="$low_color"
    else    
        case "${statuses[$i]}" in
        "Charging")
            color="$charging_color"
        ;;
        "Full")
            color="$full_color"
        ;;
        "AC")
            color="$ac_color"
        ;;
        "Discharging"|"Unknown")
            color="$discharging_color"
        ;;
        esac
    fi


    # Print Battery number if there is more than one
    if (( $end > 0 )) ; then 
        message="$message $(($i + 1)):" 
    fi

    if [[ "$BLOCK_BUTTON" -eq 1 ]]; then 
        message="$message  <span foreground=\"$color\">${percentages[$i]}%${remainings[i]}</span>"
    fi
        message="<span foreground=\"$color\">$squares $message</span>" 
done

echo $message
